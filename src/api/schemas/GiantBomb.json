{
	"components": {
		"parameters": {
			"FieldList": {
				"in": "query",
				"name": "field_list",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/FieldList"
				}
			},
			"Filter": {
				"description": "The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format)",
				"in": "query",
				"name": "filter",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/Filter"
				}
			},
			"Format": {
				"description": "The data format of the response takes either xml, json, or jsonp.",
				"in": "query",
				"name": "format",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/Format"
				}
			},
			"Game": {
				"description": "Filter by the ID field on the game resource.",
				"in": "query",
				"name": "game",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/GameId"
				}
			},
			"Limit": {
				"description": "The number of results to display per page. This value defaults to 100 and can not exceed this number.",
				"in": "query",
				"name": "limit",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/Limit"
				}
			},
			"Offset": {
				"description": "Return results starting with the object at the offset specified.",
				"in": "query",
				"name": "offset",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/Offset"
				}
			},
			"Page": {
				"description": "Page number of search results.",
				"in": "query",
				"name": "page",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/Page"
				}
			},
			"Platforms": {
				"description": "Filters results by platform. The value passed to this filter should be the ID of the platform to filter results by.",
				"in": "query",
				"name": "platforms",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/PlatformId"
				}
			},
			"Query": {
				"description": "The search string.",
				"in": "query",
				"name": "query",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/Query"
				}
			},
			"Resources": {
				"description": "List of resources to filter results. This filter can accept multiple arguments, each delimited with a \",\". Available options are:<br />game<br />franchise<br />character<br />concept<br />object<br />location<br />person<br />company<br />video",
				"explode": false,
				"in": "query",
				"name": "resources",
				"required": false,
				"schema": {
					"description": "##ENTER##",
					"items": {
						"$ref": "#/components/schemas/ResourceType"
					},
					"type": "array"
				},
				"style": "form"
			},
			"Sort": {
				"description": "The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc.",
				"in": "query",
				"name": "sort",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/Sort"
				}
			},
			"SubscriberOnly": {
				"description": "##ENTER##",
				"in": "query",
				"name": "subscriber_only",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/SubscriberOnly"
				}
			},
			"TimeToSave": {
				"description": "The number of seconds into the video the current user is",
				"in": "query",
				"name": "time_to_save",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/TimeToSave"
				}
			},
			"VideoId": {
				"description": "Id of the video",
				"in": "query",
				"name": "video_id",
				"required": false,
				"schema": {
					"$ref": "#/components/schemas/VideoId"
				}
			}
		},
		"responses": {
			"InvalidAPIKey": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/InvalidAPIKey"
						}
					},
					"application/jsonp": {
						"schema": {
							"$ref": "#/components/schemas/InvalidAPIKey"
						}
					},
					"application/xml": {
						"schema": {
							"$ref": "#/components/schemas/InvalidAPIKey"
						}
					}
				},
				"description": "##ENTER##"
			}
		},
		"schemas": {
			"Accessory": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the accessory detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the accessory was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the accessory was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the accessory.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the accessory.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for accessory.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the accessory.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the accessory.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the accessory.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the accessory on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Accessory.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Accessory"
					},
					{
						"properties": {}
					}
				]
			},
			"Character": {
				"description": "##ENTER##",
				"properties": {
					"aliases": {
						"description": "List of aliases the character is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the character detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"birthday": {
						"description": "Birthday of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the character was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the character was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"first_appeared_in_game": {
						"description": "Game where the character made its first appearance.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"gender": {
						"description": "Gender of the character. Available options are: Male, Female, Other",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"last_name": {
						"description": "Last name of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"real_name": {
						"description": "Real name of the character.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the character on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Character.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Character"
					},
					{
						"properties": {
							"concepts": {
								"description": "Concepts related to the character.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"enemies": {
								"description": "Enemeis of the character.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"franchises": {
								"description": "Franchises related to the character.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"friends": {
								"description": "Friends of the character.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"games": {
								"description": "Games the character has appeared in.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"locations": {
								"description": "Locations related to the character.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"objects": {
								"description": "Objects related to the character.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"people": {
								"description": "People who have worked with the character.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"Chat": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the chat detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"channel_name": {
						"description": "Name of the video streaming channel associated with the chat.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the chat.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for chat.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the chat.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the chat.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"password": {
						"description": "chat password.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the chat on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"title": {
						"description": "Title of the chat.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Chat.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Chat"
					},
					{
						"properties": {}
					}
				]
			},
			"Company": {
				"description": "##ENTER##",
				"properties": {
					"abbreviation": {
						"description": "Abbreviation of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"aliases": {
						"description": "List of aliases the company is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the company detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the company was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_founded": {
						"description": "Date the company was founded.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the company was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"location_address": {
						"description": "Street address of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"location_city": {
						"description": "City the company resides in.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"location_country": {
						"description": "Country the company resides in.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"location_state": {
						"description": "State the company resides in.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"phone": {
						"description": "Phone number of the company.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the company on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"website": {
						"description": "URL to the company website.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Company.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Company"
					},
					{
						"properties": {
							"characters": {
								"description": "Characters related to the company.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"concepts": {
								"description": "Concepts related to the company.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"developed_games": {
								"description": "Games the company has developed.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"developer_releases": {
								"description": "Releases the company has developed.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"distributor_releases": {
								"description": "Releases the company has distributed.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"locations": {
								"description": "Locations related to the company.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"objects": {
								"description": "Objects related to the company.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"people": {
								"description": "People who have worked with the company.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"published_games": {
								"description": "Games published by the company.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"publisher_releases": {
								"description": "Releases the company has published.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"Concept": {
				"description": "##ENTER##",
				"properties": {
					"aliases": {
						"description": "List of aliases the concept is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the concept detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the concept was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the concept was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the concept.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the concept.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"first_appeared_in_franchise": {
						"description": "Franchise where the concept made its first appearance.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"first_appeared_in_game": {
						"description": "Game where the concept made its first appearance.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for concept.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the concept.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the concept.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the concept.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the concept on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Concept.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Concept"
					},
					{
						"properties": {
							"characters": {
								"description": "Characters related to the concept.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"concepts": {
								"description": "Concepts related to the concept.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"franchises": {
								"description": "Franchises related to the concept.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"games": {
								"description": "Games the concept has appeared in.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"locations": {
								"description": "Locations related to the concept.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"objects": {
								"description": "Objects related to the concept.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"people": {
								"description": "People who have worked with the concept.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"related_concepts": {
								"description": "Other concepts related to the concept.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"CurrentLive": {
				"description": "##ENTER##",
				"properties": {
					"success": {
						"description": "##ENTER##",
						"type": "integer"
					},
					"video": {
						"description": "##ENTER##",
						"nullable": true,
						"properties": {
							"image": {
								"description": "Thumbnail image of the video",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"stream": {
								"description": "URL of the stream (HLS format)",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"title": {
								"description": "Title of the live video",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"type": "object"
			},
			"Dlc": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the dlc detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the dlc was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the dlc was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the dlc.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the dlc.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"game": {
						"description": "Game the dlc is for.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for dlc.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the dlc.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the dlc.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the dlc.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"platform": {
						"description": "The dlc's platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"release_date": {
						"description": "Date of the dlc.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the dlc on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Dlc.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Dlc"
					},
					{
						"properties": {}
					}
				]
			},
			"FieldList": {
				"description": "##ENTER##",
				"type": "array"
			},
			"Filter": {
				"description": "##ENTER##",
				"pattern": "^((\\w+:((\\w+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$",
				"type": "string"
			},
			"Format": {
				"description": "##ENTER##",
				"enum": ["xml", "json", "jsonp"],
				"type": "string"
			},
			"Franchise": {
				"description": "##ENTER##",
				"properties": {
					"aliases": {
						"description": "List of aliases the franchise is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the franchise detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the franchise was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the franchise was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the franchise.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the franchise.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for franchise.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the franchise.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the franchise.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the franchise.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the franchise on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Franchise.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Franchise"
					},
					{
						"properties": {
							"characters": {
								"description": "Characters related to the franchise.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"concepts": {
								"description": "Concepts related to the franchise.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"games": {
								"description": "Games the franchise has appeared in.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"locations": {
								"description": "Locations related to the franchise.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"objects": {
								"description": "Objects related to the franchise.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"people": {
								"description": "People who have worked with the franchise.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"Game": {
				"description": "##ENTER##",
				"properties": {
					"aliases": {
						"description": "List of aliases the game is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the game detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the game was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the game was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the game.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the game.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_day": {
						"description": "Expected day of release. The month is represented numerically. Combine with 'expected_release_month', 'expected_release_year' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_month": {
						"description": "Expected month of release. The month is represented numerically. Combine with 'expected_release_day', 'expected_release_quarter' and 'expected_release_year' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_quarter": {
						"description": "Expected quarter of release. The quarter is represented numerically, where 1 = Q1, 2 = Q2, 3 = Q3, and 4 = Q4. Combine with 'expected_release_day', 'expected_release_day', 'expected_release_month' and 'expected_release_year' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_year": {
						"description": "Expected year of release. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for game.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the game.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the game.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the game.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"number_of_user_reviews": {
						"description": "Number of user reviews of the game on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"original_game_rating": {
						"description": "Rating of the first release of the game.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"original_release_date": {
						"description": "Date the game was first released.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"platforms": {
						"description": "The platforms the game exists on.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the game on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Game.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Game"
					},
					{
						"properties": {
							"characters": {
								"description": "Characters related to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"concepts": {
								"description": "Concepts related to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"developers": {
								"description": "Companies who developed the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"dlcs": {
								"description": "Game DLCs",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"first_appearance_characters": {
								"description": "Characters that first appeared in the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"first_appearance_concepts": {
								"description": "Concepts that first appeared in the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"first_appearance_locations": {
								"description": "Locations that first appeared in the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"first_appearance_objects": {
								"description": "Objects that first appeared in the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"first_appearance_people": {
								"description": "People that were first credited in the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"franchises": {
								"description": "Franchises related to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"genres": {
								"description": "Genres that encompass the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"images": {
								"description": "List of images associated to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"killed_characters": {
								"description": "Characters killed in the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"locations": {
								"description": "Locations related to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"objects": {
								"description": "Objects related to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"people": {
								"description": "People who have worked with the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"publishers": {
								"description": "Companies who published the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"releases": {
								"description": "Releases of the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"reviews": {
								"description": "Staff reviews of the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"similar_games": {
								"description": "Other games similar to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"themes": {
								"description": "Themes that encompass the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"videos": {
								"description": "Videos associated to the game.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"GameId": {
				"description": "##ENTER##",
				"type": "integer"
			},
			"GameRating": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the game_rating detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for game_rating.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the game_rating.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the game_rating.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the game_rating.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"rating_board": {
						"description": "Rating board that issues this game_rating.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"GameRating.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/GameRating"
					},
					{
						"properties": {}
					}
				]
			},
			"Genre": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the genre detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the genre was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the genre was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the genre.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the genre.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for genre.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the genre.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the genre.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the genre.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the genre on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Genre.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Genre"
					},
					{
						"properties": {}
					}
				]
			},
			"GetAllSavedTime": {
				"properties": {
					"savedTimes": {
						"description": "##ENTER##",
						"items": {
							"description": "##ENTER##",
							"properties": {
								"savedOn": {
									"description": "Time/date the progress was saved",
									"example": "##WRONG TYPE##",
									"type": "string"
								},
								"savedTime": {
									"description": "Saved time for this video",
									"example": "##WRONG TYPE##",
									"type": "string"
								},
								"videoId": {
									"description": "Id of the video",
									"example": "##WRONG TYPE##",
									"type": "string"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"success": {
						"description": "##ENTER##",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"GetSavedTime": {
				"description": "##ENTER##",
				"properties": {
					"savedTime": {
						"description": "Saved time of the video or -1 if no time is saved for this user",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"success": {
						"description": "##ENTER##",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"Image": {
				"description": "##ENTER##",
				"properties": {
					"icon_url": {
						"description": "URL to the icon version of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tag": {
						"description": "Name of image tag for filerting images.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"medium_url": {
						"description": "URL to the medium size of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"original_url": {
						"description": "URL to the original image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"screen_large_url": {
						"description": "URL to the large screenshot version of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"screen_url": {
						"description": "URL to the screenshot version of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"small_url": {
						"description": "URL to the small version of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"super_url": {
						"description": "URL to the super sized version of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"thumb_url": {
						"description": "URL to the thumb-sized version of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"tiny_url": {
						"description": "URL to the tiny version of the image.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"InvalidAPIKey": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Response"
					},
					{
						"properties": {
							"error": {
								"enum": ["Invalid API Key"]
							},
							"results": {
								"enum": [[]]
							},
							"status_code": {
								"enum": [100]
							}
						}
					}
				]
			},
			"Limit": {
				"description": "##ENTER##",
				"maximum": 100,
				"minimum": 0,
				"type": "integer"
			},
			"Location": {
				"description": "##ENTER##",
				"properties": {
					"aliases": {
						"description": "List of aliases the location is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the location detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the location was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the location was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the location.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the location.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"first_appeared_in_game": {
						"description": "Game where the location made its first appearance.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for location.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the location.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the location.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the location.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the location on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Location.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Location"
					},
					{
						"properties": {}
					}
				]
			},
			"Object": {
				"description": "##ENTER##",
				"properties": {
					"aliases": {
						"description": "List of aliases the object is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the object detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the object was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the object was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the object.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the object.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"first_appeared_in_game": {
						"description": "Game where the object made its first appearance.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for object.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the object.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the object.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the object.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the object on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Object.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Object"
					},
					{
						"properties": {
							"characters": {
								"description": "Characters related to the object.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"companies": {
								"description": "Companies related to the object.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"concepts": {
								"description": "Concepts related to the object.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"franchises": {
								"description": "Franchises related to the object.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"games": {
								"description": "Games the object has appeared in.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"locations": {
								"description": "Locations related to the object.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"objects": {
								"description": "Objects related to the object.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"people": {
								"description": "People who have worked with the object.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"Offset": {
				"description": "##ENTER##",
				"type": "integer"
			},
			"Page": {
				"description": "##ENTER##",
				"type": "integer"
			},
			"Person": {
				"description": "##ENTER##",
				"properties": {
					"aliases": {
						"description": "List of aliases the person is known by. A \\n (newline) seperates each alias.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the person detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"birth_date": {
						"description": "Date the person was born.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"country": {
						"description": "Country the person resides in.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the person was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the person was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"death_date": {
						"description": "Date the person died.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the person.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the person.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"first_credited_game": {
						"description": "Game the person was first credited.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"gender": {
						"description": "Gender of the person. Available options are: Male, Female, Other",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for person.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"hometown": {
						"description": "City or town the person resides in.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the person.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the person.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the person.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the person on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Person.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Person"
					},
					{
						"properties": {
							"characters": {
								"description": "Characters related to the person.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"concepts": {
								"description": "Concepts related to the person.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"franchises": {
								"description": "Franchises related to the person.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"games": {
								"description": "Games the person has appeared in.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"locations": {
								"description": "Locations related to the person.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"objects": {
								"description": "Objects related to the person.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"people": {
								"description": "People who have worked with the person.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"Platform": {
				"description": "##ENTER##",
				"properties": {
					"abbreviation": {
						"description": "Abbreviation of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the platform detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"company": {
						"description": "Company that created the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the platform was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the platform was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image_tags": {
						"description": "List of image tags to filter the images endpoint.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"install_base": {
						"description": "Approximate number of sold hardware units.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"online_support": {
						"description": "Flag indicating whether the platform has online capabilities.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"original_price": {
						"description": "Initial price point of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"release_date": {
						"description": "Date of the platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the platform on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Platform.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Platform"
					},
					{
						"properties": {}
					}
				]
			},
			"PlatformId": {
				"description": "##ENTER##",
				"type": "integer"
			},
			"Promo": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the promo detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the promo was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the promo.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for promo.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the promo.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the promo.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"link": {
						"description": "The link that promo points to.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the promo.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"resource_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ResourceType"
							},
							{
								"description": "The type of resource the promo is pointing towards."
							}
						]
					},
					"user": {
						"description": "Author of the promo.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Promo.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Promo"
					},
					{
						"properties": {}
					}
				]
			},
			"Query": {
				"description": "##ENTER##",
				"type": "string"
			},
			"RatingBoard": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the rating_board detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the rating_board was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the rating_board was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the rating_board.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the rating_board.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for rating_board.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the rating_board.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the rating_board.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the rating_board.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the rating_board on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"RatingBoard.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/RatingBoard"
					},
					{
						"properties": {
							"region": {
								"description": "Region the rating_board is responsible for.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"Region": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the region detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the region was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the region was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the region.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the region.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for region.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the region.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the region.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the region.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the region on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Region.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Region"
					},
					{
						"properties": {
							"rating_boards": {
								"description": "region in the region.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"Release": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the release detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the release was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the release was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_day": {
						"description": "\"Expected day of release. The day is represented numerically. Combine with 'expected_release_month', 'expected_release_year' and 'expected_release_quarter' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set.\"",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_month": {
						"description": "\"Expected month of release. The month is represented numerically. Combine with 'expected_release_day', expected_release_quarter' and 'expected_release_year' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set.\"",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_quarter": {
						"description": "Expected quarter of release. The quarter is represented numerically, where 1 = Q1, 2 = Q2, 3 = Q3, and 4 = Q4. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_year' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"expected_release_year": {
						"description": "Expected year of release. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'release_date' field is set.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"game": {
						"description": "Game the release is for.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"game_rating": {
						"description": "Rating of the release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"maximum_players": {
						"description": "Maximum players",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"minimum_players": {
						"description": "Minimum players",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"multiplayer_features": {
						"description": "Multiplayer features",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"platform": {
						"description": "The release's platform.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"product_code_type": {
						"description": "The type of product code the release has (ex. UPC/A, ISBN-10, EAN-13).",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"product_code_value": {
						"description": "The release's product code.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"region": {
						"description": "Region the release is responsible for.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"release_date": {
						"description": "Date of the release.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"resolutions": {
						"description": "Resolutions available",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"singleplayer_features": {
						"description": "Singleplayer features",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the release on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"sound_systems": {
						"description": "Sound systems",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"widescreen_support": {
						"description": "Widescreen support",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Release.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Release"
					},
					{
						"properties": {
							"developers": {
								"description": "Companies who developed the release.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"publishers": {
								"description": "Companies who published the release.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"ResourceType": {
				"description": "##ENTER##",
				"enum": ["game", "franchise", "character", "concept", "object", "location", "person", "company", "video"],
				"type": "string"
			},
			"Response": {
				"description": "##ENTER##",
				"properties": {
					"error": {
						"description": "A text string representing the status_code",
						"type": "string"
					},
					"limit": {
						"description": "The value of the limit filter specified, or 100 if not specified",
						"type": "integer"
					},
					"number_of_page_results": {
						"description": "The number of results on this page",
						"type": "integer"
					},
					"number_of_total_results": {
						"description": "The number of total results matching the filter conditions specified",
						"type": "integer"
					},
					"offset": {
						"description": "The value of the offset filter specified, or 0 if not specified",
						"type": "integer"
					},
					"results": {
						"description": "Zero or more items that match the filters specified",
						"type": "string"
					},
					"status_code": {
						"description": "An integer indicating the result of the request. Acceptable values are:<br />1:OK<br />100:Invalid API Key<br />101:Object Not Found<br />102:Error in URL Format<br />103:'jsonp' format requires a 'json_callback' argument<br />104:Filter Error<br />105:Subscriber only video is for subscribers only",
						"type": "integer"
					}
				},
				"type": "object",
				"xml": {
					"name": "response",
					"wrapped": true
				}
			},
			"Review": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the review detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"dlc_name": {
						"description": "Name of the Downloadable Content package.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"game": {
						"description": "Game the review is for.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"publish_date": {
						"description": "Date the review was published on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"release": {
						"description": "Release of game for review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"reviewer": {
						"description": "Name of the review's author.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"score": {
						"description": "The score given to the game on a scale of 1 to 5.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the review on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Review.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Review"
					},
					{
						"properties": {
							"platforms": {
								"description": "Platforms the review appeared in.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"SaveTime": {
				"description": "##ENTER##",
				"properties": {
					"message": {
						"description": "##ENTER##",
						"type": "string"
					},
					"success": {
						"description": "##ENTER##",
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"Search": {
				"allOf": [
					{
						"oneOf": [
							{
								"$ref": "#/components/schemas/Game"
							},
							{
								"$ref": "#/components/schemas/Franchise"
							},
							{
								"$ref": "#/components/schemas/Character"
							},
							{
								"$ref": "#/components/schemas/Concept"
							},
							{
								"$ref": "#/components/schemas/Object"
							},
							{
								"$ref": "#/components/schemas/Location"
							},
							{
								"$ref": "#/components/schemas/Person"
							},
							{
								"$ref": "#/components/schemas/Company"
							},
							{
								"$ref": "#/components/schemas/Video"
							}
						]
					},
					{
						"description": "##ENTER##",
						"properties": {
							"resource_type": {
								"allOf": [
									{
										"$ref": "#/components/schemas/ResourceType"
									},
									{
										"description": "The type of resource the result is mapped to. Available options are:<br />game<br />franchise<br />character<br />concept<br />object<br />location<br />person<br />company<br />video"
									}
								]
							}
						},
						"type": "object"
					}
				]
			},
			"Sort": {
				"description": "##ENTER##",
				"pattern": "^\\w+:((asc)|(desc))$",
				"type": "string"
			},
			"SubscriberOnly": {
				"description": "##ENTER##",
				"type": "boolean"
			},
			"Theme": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the theme detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for theme.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the theme.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the theme.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the theme on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Theme.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Theme"
					},
					{
						"properties": {}
					}
				]
			},
			"TimeToSave": {
				"description": "##ENTER##",
				"type": "integer"
			},
			"Type": {
				"description": "##ENTER##",
				"properties": {
					"detail_resource_name": {
						"description": "The name of the type's detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the type.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"list_resource_name": {
						"description": "The name of the type's list resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"UserReview": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the user_review detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_added": {
						"description": "Date the user_review was added to Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"date_last_updated": {
						"description": "Date the user_review was last updated on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the user_review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"description": {
						"description": "Description of the user_review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"dlc": {
						"description": "DLC being reviewed.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"game": {
						"description": "Game being reviewd.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for user_review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the user_review.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"release": {
						"description": "Release being reviewed.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"reviewer": {
						"description": "Name of the review's author.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"score": {
						"description": "The score given to the game on a scale of 1 to 5.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the user_review on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"UserReview.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/UserReview"
					},
					{
						"properties": {}
					}
				]
			},
			"Video": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the video detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"associations": {
						"description": "Related objects to the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"embed_player": {
						"description": "URL for video embed player. To be inserted into an iFrame.<br />You can add ?autoplay=true to auto-play.<br />You can add ?time=x where 'x' is an integer between 0 and the length of the video in seconds to start the video at that point.<br />You can add ?vol=x where 'x' is a decimal between 0 and 1, .75 for example, to set the starting volume.<br />The above three parameters may be used together. Example: ?time=45&vol=.5&autoplay=true<br />See http://www.giantbomb.com/api/video-embed-sample/ for more information on using the embed player.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"hd_url": {
						"description": "URL to the HD version of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"high_url": {
						"description": "URL to the High Res version of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"length_seconds": {
						"description": "Length (in seconds) of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"low_url": {
						"description": "URL to the Low Res version of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"premium": {
						"description": "Premium status of video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"publish_date": {
						"description": "Date the video was published on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"saved_time": {
						"description": "The time where the user left off watching this video",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the video on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"url": {
						"description": "The video's filename.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"user": {
						"description": "Author of the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"video_categories": {
						"description": "Video categories",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"video_show": {
						"description": "Video show",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"video_type": {
						"description": "Video category",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"youtube_id": {
						"description": "Youtube ID for the video.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"Video.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Video"
					},
					{
						"properties": {
							"crew": {
								"description": "Crew of the video.",
								"example": "##WRONG TYPE##",
								"type": "string"
							},
							"hosts": {
								"description": "Hosts of the video.",
								"example": "##WRONG TYPE##",
								"type": "string"
							}
						}
					}
				]
			},
			"VideoCategory": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the video_category detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the video_category.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the video_category.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the video_category.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the video_category.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the video_category on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"VideoCategory.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/VideoCategory"
					},
					{
						"properties": {}
					}
				]
			},
			"VideoId": {
				"description": "##ENTER##",
				"type": "integer"
			},
			"VideoShow": {
				"description": "##ENTER##",
				"properties": {
					"active": {
						"description": "Is this show currently active",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_detail_url": {
						"description": "URL pointing to the video_show detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"api_videos_url": {
						"description": "Endpoint to retrieve the videos attached to this video_show.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the video_show.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"display_nav": {
						"description": "Should this show be displayed in navigation menus",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"guid": {
						"description": "For use in single item api call for video_show.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the video_show.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"image": {
						"description": "Main image of the video_show.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"latest": {
						"description": "The latest episode of a video show. Overrides other sorts when used as a sort field.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"logo": {
						"description": "Show logo.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"position": {
						"description": "Editor ordering.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"premium": {
						"description": "Premium status of video_show.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the video_show on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"title": {
						"description": "Title of the video_show.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"VideoShow.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/VideoShow"
					},
					{
						"properties": {}
					}
				]
			},
			"VideoType": {
				"description": "##ENTER##",
				"properties": {
					"api_detail_url": {
						"description": "URL pointing to the video_type detail resource.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"deck": {
						"description": "Brief summary of the video_type.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"id": {
						"description": "Unique ID of the video_type.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"name": {
						"description": "Name of the video_type.",
						"example": "##WRONG TYPE##",
						"type": "string"
					},
					"site_detail_url": {
						"description": "URL pointing to the video_type on Giant Bomb.",
						"example": "##WRONG TYPE##",
						"type": "string"
					}
				},
				"type": "object"
			},
			"VideoType.Detail": {
				"allOf": [
					{
						"$ref": "#/components/schemas/VideoType"
					},
					{
						"properties": {}
					}
				]
			}
		},
		"securitySchemes": {
			"api_key": {
				"in": "query",
				"name": "api_key",
				"type": "apiKey"
			}
		}
	},
	"externalDocs": {
		"description": "##ENTER##",
		"url": "https://www.giantbomb.com/api/documentation/"
	},
	"info": {
		"description": "##ENTER##",
		"title": "Giant Bomb API",
		"version": "0.7"
	},
	"openapi": "3.0.2",
	"paths": {
		"/accessories": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Accessory"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Accessory"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Accessory"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/accessory/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Accessory.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Accessory.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Accessory.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/character/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"birthday",
											"concepts",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"enemies",
											"first_appeared_in_game",
											"franchises",
											"friends",
											"games",
											"gender",
											"guid",
											"id",
											"image",
											"image_tags",
											"last_name",
											"locations",
											"name",
											"objects",
											"people",
											"real_name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Character.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Character.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Character.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/characters": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"birthday",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"first_appeared_in_game",
											"gender",
											"guid",
											"id",
											"image",
											"image_tags",
											"last_name",
											"name",
											"real_name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Character"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Character"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Character"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/chat/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "channel_name", "deck", "guid", "id", "image", "password", "site_detail_url", "title"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Chat.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Chat.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Chat.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Live"]
			},
			"summary": "##ENTER##"
		},
		"/chats": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "channel_name", "deck", "guid", "id", "image", "password", "site_detail_url", "title"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Chat"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Chat"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Chat"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Live"]
			},
			"summary": "##ENTER##"
		},
		"/companies": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"abbreviation",
											"aliases",
											"api_detail_url",
											"date_added",
											"date_founded",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"image_tags",
											"location_address",
											"location_city",
											"location_country",
											"location_state",
											"name",
											"phone",
											"site_detail_url",
											"website"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Company"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Company"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Company"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/company/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"abbreviation",
											"aliases",
											"api_detail_url",
											"characters",
											"concepts",
											"date_added",
											"date_founded",
											"date_last_updated",
											"deck",
											"description",
											"developed_games",
											"developer_releases",
											"distributor_releases",
											"guid",
											"id",
											"image",
											"image_tags",
											"location_address",
											"location_city",
											"location_country",
											"location_state",
											"locations",
											"name",
											"objects",
											"people",
											"phone",
											"published_games",
											"publisher_releases",
											"site_detail_url",
											"website"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Company.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Company.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Company.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/concept/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"characters",
											"concepts",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"first_appeared_in_franchise",
											"first_appeared_in_game",
											"franchises",
											"games",
											"guid",
											"id",
											"image",
											"image_tags",
											"locations",
											"name",
											"objects",
											"people",
											"related_concepts",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Concept.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Concept.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Concept.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/concepts": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"first_appeared_in_franchise",
											"first_appeared_in_game",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Concept"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Concept"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Concept"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/dlc/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"game",
											"guid",
											"id",
											"image",
											"name",
											"platform",
											"release_date",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Dlc.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Dlc.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Dlc.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/dlcs": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"game",
											"guid",
											"id",
											"image",
											"name",
											"platform",
											"release_date",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Platforms"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Dlc"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Dlc"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Dlc"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/franchise/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"characters",
											"concepts",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"games",
											"guid",
											"id",
											"image",
											"image_tags",
											"locations",
											"name",
											"objects",
											"people",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Franchise.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Franchise.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Franchise.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/franchises": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Franchise"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Franchise"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Franchise"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/game_rating/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "guid", "id", "image", "name", "rating_board"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/GameRating.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/GameRating.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/GameRating.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/game_ratings": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "guid", "id", "image", "name", "rating_board"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/GameRating"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/GameRating"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/GameRating"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/game/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"characters",
											"concepts",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"developers",
											"dlcs",
											"expected_release_day",
											"expected_release_month",
											"expected_release_quarter",
											"expected_release_year",
											"first_appearance_characters",
											"first_appearance_concepts",
											"first_appearance_locations",
											"first_appearance_objects",
											"first_appearance_people",
											"franchises",
											"genres",
											"guid",
											"id",
											"image",
											"image_tags",
											"images",
											"killed_characters",
											"locations",
											"name",
											"number_of_user_reviews",
											"objects",
											"original_game_rating",
											"original_release_date",
											"people",
											"platforms",
											"publishers",
											"releases",
											"reviews",
											"similar_games",
											"site_detail_url",
											"themes",
											"videos"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Game.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Game.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Game.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/games": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"expected_release_day",
											"expected_release_month",
											"expected_release_quarter",
											"expected_release_year",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"number_of_user_reviews",
											"original_game_rating",
											"original_release_date",
											"platforms",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Platforms"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Game"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Game"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Game"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/genre/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "date_added", "date_last_updated", "deck", "description", "guid", "id", "image", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Genre.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Genre.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Genre.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/genres": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "date_added", "date_last_updated", "deck", "description", "guid", "id", "image", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Genre"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Genre"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Genre"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/images/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"icon_url",
											"image_tag",
											"medium_url",
											"original_url",
											"screen_large_url",
											"screen_url",
											"small_url",
											"super_url",
											"thumb_url",
											"tiny_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Filter"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Image"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Image"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Image"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/location/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"first_appeared_in_game",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Location.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Location.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Location.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/locations": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"first_appeared_in_game",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Location"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Location"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Location"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/object/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"characters",
											"companies",
											"concepts",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"first_appeared_in_game",
											"franchises",
											"games",
											"guid",
											"id",
											"image",
											"image_tags",
											"locations",
											"name",
											"objects",
											"people",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Object.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Object.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Object.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/objects": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"first_appeared_in_game",
											"guid",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Object"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Object"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Object"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/people": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"birth_date",
											"country",
											"date_added",
											"date_last_updated",
											"death_date",
											"deck",
											"description",
											"first_credited_game",
											"gender",
											"guid",
											"hometown",
											"id",
											"image",
											"image_tags",
											"name",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Person"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Person"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Person"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/person/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"aliases",
											"api_detail_url",
											"birth_date",
											"characters",
											"concepts",
											"country",
											"date_added",
											"date_last_updated",
											"death_date",
											"deck",
											"description",
											"first_credited_game",
											"franchises",
											"games",
											"gender",
											"guid",
											"hometown",
											"id",
											"image",
											"image_tags",
											"locations",
											"name",
											"objects",
											"people",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Person.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Person.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Person.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/platform/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"abbreviation",
											"api_detail_url",
											"company",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"image_tags",
											"install_base",
											"name",
											"online_support",
											"original_price",
											"release_date",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Platform.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Platform.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Platform.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/platforms": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"abbreviation",
											"api_detail_url",
											"company",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"image_tags",
											"install_base",
											"name",
											"online_support",
											"original_price",
											"release_date",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Platform"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Platform"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Platform"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/promo/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "date_added", "deck", "guid", "id", "image", "link", "name", "resource_type", "user"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Promo.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Promo.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Promo.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["General"]
			},
			"summary": "##ENTER##"
		},
		"/promos": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "date_added", "deck", "guid", "id", "image", "link", "name", "resource_type", "user"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Promo"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Promo"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Promo"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["General"]
			},
			"summary": "##ENTER##"
		},
		"/rating_board/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"name",
											"region",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/RatingBoard.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/RatingBoard.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/RatingBoard.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/rating_boards": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "date_added", "date_last_updated", "deck", "description", "guid", "id", "image", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/RatingBoard"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/RatingBoard"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/RatingBoard"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/region/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"guid",
											"id",
											"image",
											"name",
											"rating_boards",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Region.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Region.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Region.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/regions": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "date_added", "date_last_updated", "deck", "description", "guid", "id", "image", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Region"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Region"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Region"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/release/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"developers",
											"expected_release_day",
											"expected_release_month",
											"expected_release_quarter",
											"expected_release_year",
											"game",
											"game_rating",
											"guid",
											"id",
											"image",
											"maximum_players",
											"minimum_players",
											"multiplayer_features",
											"name",
											"platform",
											"product_code_type",
											"product_code_value",
											"publishers",
											"region",
											"release_date",
											"resolutions",
											"singleplayer_features",
											"site_detail_url",
											"sound_systems",
											"widescreen_support"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Release.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Release.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Release.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/releases": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"expected_release_day",
											"expected_release_month",
											"expected_release_quarter",
											"expected_release_year",
											"game",
											"game_rating",
											"guid",
											"id",
											"image",
											"maximum_players",
											"minimum_players",
											"multiplayer_features",
											"name",
											"platform",
											"product_code_type",
											"product_code_value",
											"region",
											"release_date",
											"resolutions",
											"singleplayer_features",
											"site_detail_url",
											"sound_systems",
											"widescreen_support"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Platforms"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Release"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Release"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Release"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/review/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"deck",
											"description",
											"dlc_name",
											"game",
											"guid",
											"id",
											"platforms",
											"publish_date",
											"release",
											"reviewer",
											"score",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Review.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Review.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Review.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Reviews"]
			},
			"summary": "##ENTER##"
		},
		"/reviews": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"deck",
											"description",
											"dlc_name",
											"game",
											"guid",
											"id",
											"publish_date",
											"release",
											"reviewer",
											"score",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Review"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Review"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Review"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Reviews"]
			},
			"summary": "##ENTER##"
		},
		"/search": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"abbreviation",
											"aliases",
											"api_detail_url",
											"associations",
											"birth_date",
											"birthday",
											"country",
											"date_added",
											"date_founded",
											"date_last_updated",
											"death_date",
											"deck",
											"description",
											"embed_player",
											"expected_release_day",
											"expected_release_month",
											"expected_release_quarter",
											"expected_release_year",
											"first_appeared_in_franchise",
											"first_appeared_in_game",
											"first_credited_game",
											"gender",
											"guid",
											"hd_url",
											"high_url",
											"hometown",
											"id",
											"image",
											"image_tags",
											"last_name",
											"length_seconds",
											"location_address",
											"location_city",
											"location_country",
											"location_state",
											"low_url",
											"name",
											"number_of_user_reviews",
											"original_game_rating",
											"original_release_date",
											"phone",
											"platforms",
											"premium",
											"publish_date",
											"real_name",
											"resource_type",
											"saved_time",
											"site_detail_url",
											"url",
											"user",
											"video_categories",
											"video_show",
											"video_type",
											"website",
											"youtube_id"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "The number of results to display per page. This value defaults to 10 and can not exceed this number.",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/Limit"
								},
								{
									"description": "The number of results to display per page. This value defaults to 10 and can not exceed this number.",
									"maximum": 10
								}
							]
						}
					},
					{
						"$ref": "#/components/parameters/Page"
					},
					{
						"$ref": "#/components/parameters/Query"
					},
					{
						"$ref": "#/components/parameters/Resources"
					},
					{
						"$ref": "#/components/parameters/SubscriberOnly"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Search"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Search"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Search"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Search"]
			},
			"summary": "##ENTER##"
		},
		"/theme/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "guid", "id", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Theme.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Theme.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Theme.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/themes": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "guid", "id", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Theme"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Theme"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Theme"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Wiki"]
			},
			"summary": "##ENTER##"
		},
		"/types": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Type"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Type"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Type"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["General"]
			},
			"summary": "##ENTER##"
		},
		"/user_review/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"dlc",
											"game",
											"guid",
											"id",
											"release",
											"reviewer",
											"score",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/UserReview.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/UserReview.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/UserReview.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Reviews"]
			},
			"summary": "##ENTER##"
		},
		"/user_reviews": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"date_added",
											"date_last_updated",
											"deck",
											"description",
											"dlc",
											"game",
											"guid",
											"id",
											"release",
											"reviewer",
											"score",
											"site_detail_url"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Game"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/UserReview"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/UserReview"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/UserReview"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Reviews"]
			},
			"summary": "##ENTER##"
		},
		"/video_categories": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "deck", "id", "image", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Sort"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoCategory"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoCategory"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoCategory"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		},
		"/video_category/{id}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "deck", "id", "image", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoCategory.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoCategory.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoCategory.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		},
		"/video_show/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"active",
											"api_detail_url",
											"api_videos_url",
											"deck",
											"display_nav",
											"guid",
											"id",
											"image",
											"latest",
											"logo",
											"position",
											"premium",
											"site_detail_url",
											"title"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoShow.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoShow.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoShow.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		},
		"/video_shows": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"active",
											"api_detail_url",
											"api_videos_url",
											"deck",
											"display_nav",
											"guid",
											"id",
											"image",
											"latest",
											"logo",
											"position",
											"premium",
											"site_detail_url",
											"title"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoShow"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoShow"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoShow"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		},
		"/video_type/{id}": {
			"description": "##ENTER##",
			"get": {
				"deprecated": true,
				"description": "##ENTER##<br />DEPRECATED: Please use the video_category or the video_show endpoint",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "deck", "id", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoType.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoType.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/VideoType.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "Get a details of a video type",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		},
		"/video_types": {
			"description": "##ENTER##",
			"get": {
				"deprecated": true,
				"description": "##ENTER##<br />DEPRECATED: Please use the video_category or the video_show endpoint",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": ["api_detail_url", "deck", "id", "name", "site_detail_url"],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoType"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoType"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/VideoType"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "Get a list of video types",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		},
		"/video/{guid}": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"associations",
											"crew",
											"deck",
											"embed_player",
											"guid",
											"hd_url",
											"high_url",
											"hosts",
											"id",
											"image",
											"length_seconds",
											"low_url",
											"name",
											"premium",
											"publish_date",
											"saved_time",
											"site_detail_url",
											"url",
											"user",
											"video_categories",
											"video_show",
											"video_type",
											"youtube_id"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"description": "##ENTER##",
						"in": "path",
						"name": "guid",
						"required": true,
						"schema": {
							"description": "##ENTER##",
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Video.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Video.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"$ref": "#/components/schemas/Video.Detail"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		},
		"/video/current-live": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentLive"
								}
							},
							"application/jsonp": {
								"schema": {
									"$ref": "#/components/schemas/CurrentLive"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/CurrentLive"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "Get the currently running live stream",
				"tags": ["Live"]
			},
			"summary": "##ENTER##"
		},
		"/video/get-all-saved-times": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetAllSavedTime"
								}
							},
							"application/jsonp": {
								"schema": {
									"$ref": "#/components/schemas/GetAllSavedTime"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/GetAllSavedTime"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "Get all the video saved times for the user",
				"tags": ["Bookmarks"]
			},
			"summary": "##ENTER##"
		},
		"/video/get-saved-time": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"$ref": "#/components/parameters/VideoId"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetSavedTime"
								}
							},
							"application/jsonp": {
								"schema": {
									"$ref": "#/components/schemas/GetSavedTime"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/GetSavedTime"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "Get the saved time of a video for the user",
				"tags": ["Bookmarks"]
			},
			"summary": "##ENTER##"
		},
		"/video/save-time": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"$ref": "#/components/parameters/VideoId"
					},
					{
						"$ref": "#/components/parameters/TimeToSave"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SaveTime"
								}
							},
							"application/jsonp": {
								"schema": {
									"$ref": "#/components/schemas/SaveTime"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/SaveTime"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "Save the progress time of a video for this user",
				"tags": ["Bookmarks"]
			},
			"summary": "##ENTER##"
		},
		"/videos": {
			"description": "##ENTER##",
			"get": {
				"description": "##ENTER##",
				"externalDocs": {
					"description": "##ENTER##",
					"url": "https://www.giantbomb.com/api/documentation/#ADD"
				},
				"parameters": [
					{
						"$ref": "#/components/parameters/Format"
					},
					{
						"description": "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
						"explode": false,
						"in": "query",
						"name": "field_list",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/FieldList"
								},
								{
									"items": {
										"enum": [
											"api_detail_url",
											"associations",
											"deck",
											"embed_player",
											"guid",
											"hd_url",
											"high_url",
											"id",
											"image",
											"length_seconds",
											"low_url",
											"name",
											"premium",
											"publish_date",
											"saved_time",
											"site_detail_url",
											"url",
											"user",
											"video_categories",
											"video_show",
											"video_type",
											"youtube_id"
										],
										"type": "string"
									}
								}
							]
						},
						"style": "form"
					},
					{
						"$ref": "#/components/parameters/Limit"
					},
					{
						"$ref": "#/components/parameters/Offset"
					},
					{
						"$ref": "#/components/parameters/Sort"
					},
					{
						"$ref": "#/components/parameters/SubscriberOnly"
					},
					{
						"$ref": "#/components/parameters/Filter"
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Video"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/jsonp": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Video"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							},
							"application/xml": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Response"
										},
										{
											"properties": {
												"results": {
													"items": {
														"$ref": "#/components/schemas/Video"
													},
													"type": "array"
												},
												"version": {
													"description": "##ENTER##",
													"example": "1.0",
													"type": "string"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								}
							}
						},
						"description": "##ENTER##"
					},
					"401": {
						"$ref": "#/components/responses/InvalidAPIKey"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"summary": "##ENTER##",
				"tags": ["Videos"]
			},
			"summary": "##ENTER##"
		}
	},
	"servers": [
		{
			"description": "##ENTER##",
			"url": "http://www.giantbomb.com/api/"
		}
	],
	"tags": [
		{
			"description": "##ENTER##",
			"name": "General"
		},
		{
			"description": "##ENTER##",
			"name": "Wiki"
		},
		{
			"description": "##ENTER##",
			"name": "Search"
		},
		{
			"description": "##ENTER##",
			"name": "Reviews"
		},
		{
			"description": "##ENTER##",
			"name": "Videos"
		},
		{
			"description": "##ENTER##",
			"name": "Live"
		},
		{
			"description": "##ENTER##",
			"name": "Bookmarks"
		}
	]
}
