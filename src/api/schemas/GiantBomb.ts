/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/accessories': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Accessory'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Accessory'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Accessory'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accessory/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Accessory.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Accessory.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Accessory.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/character/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Character.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Character.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Character.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/characters': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Character'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Character'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Character'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chat/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Chat.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Chat.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Chat.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/chats': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Chat'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Chat'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Chat'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/companies': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Company'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Company'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Company'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/company/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Company.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Company.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Company.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/concept/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Concept.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Concept.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Concept.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/concepts': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Concept'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Concept'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Concept'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dlc/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Dlc.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Dlc.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Dlc.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/dlcs': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description Filters results by platform. The value passed to this filter should be the ID of the platform to filter results by. */
					platforms?: components['parameters']['Platforms'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Dlc'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Dlc'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Dlc'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/franchise/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Franchise.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Franchise.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Franchise.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/franchises': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Franchise'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Franchise'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Franchise'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/game_rating/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['GameRating.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['GameRating.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['GameRating.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/game_ratings': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['GameRating'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['GameRating'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['GameRating'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/game/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Game.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Game.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Game.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/games': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description Filters results by platform. The value passed to this filter should be the ID of the platform to filter results by. */
					platforms?: components['parameters']['Platforms'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Game'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Game'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Game'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/genre/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Genre.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Genre.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Genre.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/genres': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Genre'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Genre'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Genre'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/images/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Image'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Image'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Image'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/location/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Location.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Location.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Location.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/locations': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Location'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Location'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Location'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/object/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Object.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Object.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Object.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/objects': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Object'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Object'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Object'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/people': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Person'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Person'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Person'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/person/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Person.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Person.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Person.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/platform/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Platform.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Platform.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Platform.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/platforms': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Platform'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Platform'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Platform'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/promo/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Promo.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Promo.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Promo.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/promos': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Promo'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Promo'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Promo'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/rating_board/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['RatingBoard.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['RatingBoard.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['RatingBoard.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/rating_boards': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['RatingBoard'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['RatingBoard'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['RatingBoard'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/region/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Region.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Region.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Region.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/regions': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Region'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Region'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Region'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/release/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Release.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Release.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Release.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/releases': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description Filters results by platform. The value passed to this filter should be the ID of the platform to filter results by. */
					platforms?: components['parameters']['Platforms'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Release'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Release'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Release'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/review/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Review.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Review.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Review.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/reviews': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Review'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Review'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Review'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/search': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 10 and can not exceed this number. */
					limit?: components['schemas']['Limit'] & unknown;
					/** @description Page number of search results. */
					page?: components['parameters']['Page'];
					/** @description The search string. */
					query?: components['parameters']['Query'];
					/** @description List of resources to filter results. This filter can accept multiple arguments, each delimited with a ",". Available options are:<br />game<br />franchise<br />character<br />concept<br />object<br />location<br />person<br />company<br />video */
					resources?: components['parameters']['Resources'];
					/** @description ##ENTER## */
					subscriber_only?: components['parameters']['SubscriberOnly'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Search'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Search'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Search'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/theme/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Theme.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Theme.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Theme.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/themes': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Theme'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Theme'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Theme'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/types': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Type'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Type'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Type'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user_review/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['UserReview.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['UserReview.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['UserReview.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/user_reviews': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description Filter by the ID field on the game resource. */
					game?: components['parameters']['Game'];
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['UserReview'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['UserReview'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['UserReview'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video_categories': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['VideoCategory'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['VideoCategory'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['VideoCategory'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video_category/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['VideoCategory.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['VideoCategory.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['VideoCategory.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video_show/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['VideoShow.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['VideoShow.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['VideoShow.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video_shows': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['VideoShow'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['VideoShow'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['VideoShow'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video_type/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get a details of a video type
		 * @deprecated
		 * @description ##ENTER##<br />DEPRECATED: Please use the video_category or the video_show endpoint
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					id: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['VideoType.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['VideoType.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['VideoType.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video_types': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get a list of video types
		 * @deprecated
		 * @description ##ENTER##<br />DEPRECATED: Please use the video_category or the video_show endpoint
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['VideoType'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['VideoType'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['VideoType'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video/{guid}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
				};
				header?: never;
				path: {
					/** @description ##ENTER## */
					guid: string;
				};
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Video.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Video.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Video.Detail'];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video/current-live': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get the currently running live stream
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['CurrentLive'];
						'application/jsonp': components['schemas']['CurrentLive'];
						'application/xml': components['schemas']['CurrentLive'];
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video/get-all-saved-times': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get all the video saved times for the user
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['GetAllSavedTime'];
						'application/jsonp': components['schemas']['GetAllSavedTime'];
						'application/xml': components['schemas']['GetAllSavedTime'];
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video/get-saved-time': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get the saved time of a video for the user
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description Id of the video */
					video_id?: components['parameters']['VideoId'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['GetSavedTime'];
						'application/jsonp': components['schemas']['GetSavedTime'];
						'application/xml': components['schemas']['GetSavedTime'];
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/video/save-time': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Save the progress time of a video for this user
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description Id of the video */
					video_id?: components['parameters']['VideoId'];
					/** @description The number of seconds into the video the current user is */
					time_to_save?: components['parameters']['TimeToSave'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['SaveTime'];
						'application/jsonp': components['schemas']['SaveTime'];
						'application/xml': components['schemas']['SaveTime'];
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/videos': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * ##ENTER##
		 * @description ##ENTER##
		 */
		get: {
			parameters: {
				query?: {
					/** @description The data format of the response takes either xml, json, or jsonp. */
					format?: components['parameters']['Format'];
					/** @description List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a "," */
					field_list?: components['schemas']['FieldList'] & unknown;
					/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
					limit?: components['parameters']['Limit'];
					/** @description Return results starting with the object at the offset specified. */
					offset?: components['parameters']['Offset'];
					/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
					sort?: components['parameters']['Sort'];
					/** @description ##ENTER## */
					subscriber_only?: components['parameters']['SubscriberOnly'];
					/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
					filter?: components['parameters']['Filter'];
				};
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description ##ENTER## */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						'application/json': components['schemas']['Response'] & {
							results?: components['schemas']['Video'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/jsonp': components['schemas']['Response'] & {
							results?: components['schemas']['Video'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
						'application/xml': components['schemas']['Response'] & {
							results?: components['schemas']['Video'][];
							/**
							 * @description ##ENTER##
							 * @example 1.0
							 */
							version?: string;
						};
					};
				};
				401: components['responses']['InvalidAPIKey'];
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** @description ##ENTER## */
		Accessory: {
			/**
			 * @description URL pointing to the accessory detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the accessory was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the accessory was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the accessory.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the accessory.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description For use in single item api call for accessory.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the accessory.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the accessory.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Name of the accessory.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the accessory on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Accessory.Detail': components['schemas']['Accessory'] & unknown;
		/** @description ##ENTER## */
		Character: {
			/**
			 * @description List of aliases the character is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the character detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Birthday of the character.
			 * @example ##WRONG TYPE##
			 */
			birthday?: string;
			/**
			 * @description Date the character was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the character was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the character.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the character.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Game where the character made its first appearance.
			 * @example ##WRONG TYPE##
			 */
			first_appeared_in_game?: string;
			/**
			 * @description Gender of the character. Available options are: Male, Female, Other
			 * @example ##WRONG TYPE##
			 */
			gender?: string;
			/**
			 * @description For use in single item api call for character.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the character.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the character.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Last name of the character.
			 * @example ##WRONG TYPE##
			 */
			last_name?: string;
			/**
			 * @description Name of the character.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description Real name of the character.
			 * @example ##WRONG TYPE##
			 */
			real_name?: string;
			/**
			 * @description URL pointing to the character on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Character.Detail': components['schemas']['Character'] & {
			/**
			 * @description Concepts related to the character.
			 * @example ##WRONG TYPE##
			 */
			concepts?: string;
			/**
			 * @description Enemeis of the character.
			 * @example ##WRONG TYPE##
			 */
			enemies?: string;
			/**
			 * @description Franchises related to the character.
			 * @example ##WRONG TYPE##
			 */
			franchises?: string;
			/**
			 * @description Friends of the character.
			 * @example ##WRONG TYPE##
			 */
			friends?: string;
			/**
			 * @description Games the character has appeared in.
			 * @example ##WRONG TYPE##
			 */
			games?: string;
			/**
			 * @description Locations related to the character.
			 * @example ##WRONG TYPE##
			 */
			locations?: string;
			/**
			 * @description Objects related to the character.
			 * @example ##WRONG TYPE##
			 */
			objects?: string;
			/**
			 * @description People who have worked with the character.
			 * @example ##WRONG TYPE##
			 */
			people?: string;
		};
		/** @description ##ENTER## */
		Chat: {
			/**
			 * @description URL pointing to the chat detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Name of the video streaming channel associated with the chat.
			 * @example ##WRONG TYPE##
			 */
			channel_name?: string;
			/**
			 * @description Brief summary of the chat.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description For use in single item api call for chat.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the chat.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the chat.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description chat password.
			 * @example ##WRONG TYPE##
			 */
			password?: string;
			/**
			 * @description URL pointing to the chat on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
			/**
			 * @description Title of the chat.
			 * @example ##WRONG TYPE##
			 */
			title?: string;
		};
		'Chat.Detail': components['schemas']['Chat'] & unknown;
		/** @description ##ENTER## */
		Company: {
			/**
			 * @description Abbreviation of the company.
			 * @example ##WRONG TYPE##
			 */
			abbreviation?: string;
			/**
			 * @description List of aliases the company is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the company detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the company was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the company was founded.
			 * @example ##WRONG TYPE##
			 */
			date_founded?: string;
			/**
			 * @description Date the company was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the company.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the company.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description For use in single item api call for company.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the company.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the company.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Street address of the company.
			 * @example ##WRONG TYPE##
			 */
			location_address?: string;
			/**
			 * @description City the company resides in.
			 * @example ##WRONG TYPE##
			 */
			location_city?: string;
			/**
			 * @description Country the company resides in.
			 * @example ##WRONG TYPE##
			 */
			location_country?: string;
			/**
			 * @description State the company resides in.
			 * @example ##WRONG TYPE##
			 */
			location_state?: string;
			/**
			 * @description Name of the company.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description Phone number of the company.
			 * @example ##WRONG TYPE##
			 */
			phone?: string;
			/**
			 * @description URL pointing to the company on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
			/**
			 * @description URL to the company website.
			 * @example ##WRONG TYPE##
			 */
			website?: string;
		};
		'Company.Detail': components['schemas']['Company'] & {
			/**
			 * @description Characters related to the company.
			 * @example ##WRONG TYPE##
			 */
			characters?: string;
			/**
			 * @description Concepts related to the company.
			 * @example ##WRONG TYPE##
			 */
			concepts?: string;
			/**
			 * @description Games the company has developed.
			 * @example ##WRONG TYPE##
			 */
			developed_games?: string;
			/**
			 * @description Releases the company has developed.
			 * @example ##WRONG TYPE##
			 */
			developer_releases?: string;
			/**
			 * @description Releases the company has distributed.
			 * @example ##WRONG TYPE##
			 */
			distributor_releases?: string;
			/**
			 * @description Locations related to the company.
			 * @example ##WRONG TYPE##
			 */
			locations?: string;
			/**
			 * @description Objects related to the company.
			 * @example ##WRONG TYPE##
			 */
			objects?: string;
			/**
			 * @description People who have worked with the company.
			 * @example ##WRONG TYPE##
			 */
			people?: string;
			/**
			 * @description Games published by the company.
			 * @example ##WRONG TYPE##
			 */
			published_games?: string;
			/**
			 * @description Releases the company has published.
			 * @example ##WRONG TYPE##
			 */
			publisher_releases?: string;
		};
		/** @description ##ENTER## */
		Concept: {
			/**
			 * @description List of aliases the concept is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the concept detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the concept was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the concept was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the concept.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the concept.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Franchise where the concept made its first appearance.
			 * @example ##WRONG TYPE##
			 */
			first_appeared_in_franchise?: string;
			/**
			 * @description Game where the concept made its first appearance.
			 * @example ##WRONG TYPE##
			 */
			first_appeared_in_game?: string;
			/**
			 * @description For use in single item api call for concept.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the concept.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the concept.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Name of the concept.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the concept on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Concept.Detail': components['schemas']['Concept'] & {
			/**
			 * @description Characters related to the concept.
			 * @example ##WRONG TYPE##
			 */
			characters?: string;
			/**
			 * @description Concepts related to the concept.
			 * @example ##WRONG TYPE##
			 */
			concepts?: string;
			/**
			 * @description Franchises related to the concept.
			 * @example ##WRONG TYPE##
			 */
			franchises?: string;
			/**
			 * @description Games the concept has appeared in.
			 * @example ##WRONG TYPE##
			 */
			games?: string;
			/**
			 * @description Locations related to the concept.
			 * @example ##WRONG TYPE##
			 */
			locations?: string;
			/**
			 * @description Objects related to the concept.
			 * @example ##WRONG TYPE##
			 */
			objects?: string;
			/**
			 * @description People who have worked with the concept.
			 * @example ##WRONG TYPE##
			 */
			people?: string;
			/**
			 * @description Other concepts related to the concept.
			 * @example ##WRONG TYPE##
			 */
			related_concepts?: string;
		};
		/** @description ##ENTER## */
		CurrentLive: {
			/** @description ##ENTER## */
			success?: number;
			/** @description ##ENTER## */
			video?: {
				/**
				 * @description Thumbnail image of the video
				 * @example ##WRONG TYPE##
				 */
				image?: string;
				/**
				 * @description URL of the stream (HLS format)
				 * @example ##WRONG TYPE##
				 */
				stream?: string;
				/**
				 * @description Title of the live video
				 * @example ##WRONG TYPE##
				 */
				title?: string;
			} | null;
		};
		/** @description ##ENTER## */
		Dlc: {
			/**
			 * @description URL pointing to the dlc detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the dlc was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the dlc was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the dlc.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the dlc.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Game the dlc is for.
			 * @example ##WRONG TYPE##
			 */
			game?: string;
			/**
			 * @description For use in single item api call for dlc.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the dlc.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the dlc.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Name of the dlc.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description The dlc's platform.
			 * @example ##WRONG TYPE##
			 */
			platform?: string;
			/**
			 * @description Date of the dlc.
			 * @example ##WRONG TYPE##
			 */
			release_date?: string;
			/**
			 * @description URL pointing to the dlc on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Dlc.Detail': components['schemas']['Dlc'] & unknown;
		/** @description ##ENTER## */
		FieldList: unknown[];
		/** @description ##ENTER## */
		Filter: string;
		/**
		 * @description ##ENTER##
		 * @enum {string}
		 */
		Format: 'xml' | 'json' | 'jsonp';
		/** @description ##ENTER## */
		Franchise: {
			/**
			 * @description List of aliases the franchise is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the franchise detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the franchise was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the franchise was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the franchise.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the franchise.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description For use in single item api call for franchise.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the franchise.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the franchise.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Name of the franchise.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the franchise on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Franchise.Detail': components['schemas']['Franchise'] & {
			/**
			 * @description Characters related to the franchise.
			 * @example ##WRONG TYPE##
			 */
			characters?: string;
			/**
			 * @description Concepts related to the franchise.
			 * @example ##WRONG TYPE##
			 */
			concepts?: string;
			/**
			 * @description Games the franchise has appeared in.
			 * @example ##WRONG TYPE##
			 */
			games?: string;
			/**
			 * @description Locations related to the franchise.
			 * @example ##WRONG TYPE##
			 */
			locations?: string;
			/**
			 * @description Objects related to the franchise.
			 * @example ##WRONG TYPE##
			 */
			objects?: string;
			/**
			 * @description People who have worked with the franchise.
			 * @example ##WRONG TYPE##
			 */
			people?: string;
		};
		/** @description ##ENTER## */
		Game: {
			/**
			 * @description List of aliases the game is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the game detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the game was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the game was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the game.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the game.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Expected day of release. The month is represented numerically. Combine with 'expected_release_month', 'expected_release_year' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.
			 * @example ##WRONG TYPE##
			 */
			expected_release_day?: string;
			/**
			 * @description Expected month of release. The month is represented numerically. Combine with 'expected_release_day', 'expected_release_quarter' and 'expected_release_year' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.
			 * @example ##WRONG TYPE##
			 */
			expected_release_month?: string;
			/**
			 * @description Expected quarter of release. The quarter is represented numerically, where 1 = Q1, 2 = Q2, 3 = Q3, and 4 = Q4. Combine with 'expected_release_day', 'expected_release_day', 'expected_release_month' and 'expected_release_year' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.
			 * @example ##WRONG TYPE##
			 */
			expected_release_quarter?: string;
			/**
			 * @description Expected year of release. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.
			 * @example ##WRONG TYPE##
			 */
			expected_release_year?: string;
			/**
			 * @description For use in single item api call for game.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the game.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the game.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Name of the game.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description Number of user reviews of the game on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			number_of_user_reviews?: string;
			/**
			 * @description Rating of the first release of the game.
			 * @example ##WRONG TYPE##
			 */
			original_game_rating?: string;
			/**
			 * @description Date the game was first released.
			 * @example ##WRONG TYPE##
			 */
			original_release_date?: string;
			/**
			 * @description The platforms the game exists on.
			 * @example ##WRONG TYPE##
			 */
			platforms?: string;
			/**
			 * @description URL pointing to the game on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Game.Detail': components['schemas']['Game'] & {
			/**
			 * @description Characters related to the game.
			 * @example ##WRONG TYPE##
			 */
			characters?: string;
			/**
			 * @description Concepts related to the game.
			 * @example ##WRONG TYPE##
			 */
			concepts?: string;
			/**
			 * @description Companies who developed the game.
			 * @example ##WRONG TYPE##
			 */
			developers?: string;
			/**
			 * @description Game DLCs
			 * @example ##WRONG TYPE##
			 */
			dlcs?: string;
			/**
			 * @description Characters that first appeared in the game.
			 * @example ##WRONG TYPE##
			 */
			first_appearance_characters?: string;
			/**
			 * @description Concepts that first appeared in the game.
			 * @example ##WRONG TYPE##
			 */
			first_appearance_concepts?: string;
			/**
			 * @description Locations that first appeared in the game.
			 * @example ##WRONG TYPE##
			 */
			first_appearance_locations?: string;
			/**
			 * @description Objects that first appeared in the game.
			 * @example ##WRONG TYPE##
			 */
			first_appearance_objects?: string;
			/**
			 * @description People that were first credited in the game.
			 * @example ##WRONG TYPE##
			 */
			first_appearance_people?: string;
			/**
			 * @description Franchises related to the game.
			 * @example ##WRONG TYPE##
			 */
			franchises?: string;
			/**
			 * @description Genres that encompass the game.
			 * @example ##WRONG TYPE##
			 */
			genres?: string;
			/**
			 * @description List of images associated to the game.
			 * @example ##WRONG TYPE##
			 */
			images?: string;
			/**
			 * @description Characters killed in the game.
			 * @example ##WRONG TYPE##
			 */
			killed_characters?: string;
			/**
			 * @description Locations related to the game.
			 * @example ##WRONG TYPE##
			 */
			locations?: string;
			/**
			 * @description Objects related to the game.
			 * @example ##WRONG TYPE##
			 */
			objects?: string;
			/**
			 * @description People who have worked with the game.
			 * @example ##WRONG TYPE##
			 */
			people?: string;
			/**
			 * @description Companies who published the game.
			 * @example ##WRONG TYPE##
			 */
			publishers?: string;
			/**
			 * @description Releases of the game.
			 * @example ##WRONG TYPE##
			 */
			releases?: string;
			/**
			 * @description Staff reviews of the game.
			 * @example ##WRONG TYPE##
			 */
			reviews?: string;
			/**
			 * @description Other games similar to the game.
			 * @example ##WRONG TYPE##
			 */
			similar_games?: string;
			/**
			 * @description Themes that encompass the game.
			 * @example ##WRONG TYPE##
			 */
			themes?: string;
			/**
			 * @description Videos associated to the game.
			 * @example ##WRONG TYPE##
			 */
			videos?: string;
		};
		/** @description ##ENTER## */
		GameId: number;
		/** @description ##ENTER## */
		GameRating: {
			/**
			 * @description URL pointing to the game_rating detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description For use in single item api call for game_rating.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the game_rating.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the game_rating.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Name of the game_rating.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description Rating board that issues this game_rating.
			 * @example ##WRONG TYPE##
			 */
			rating_board?: string;
		};
		'GameRating.Detail': components['schemas']['GameRating'] & unknown;
		/** @description ##ENTER## */
		Genre: {
			/**
			 * @description URL pointing to the genre detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the genre was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the genre was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the genre.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the genre.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description For use in single item api call for genre.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the genre.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the genre.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Name of the genre.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the genre on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Genre.Detail': components['schemas']['Genre'] & unknown;
		GetAllSavedTime: {
			/** @description ##ENTER## */
			savedTimes?: {
				/**
				 * @description Time/date the progress was saved
				 * @example ##WRONG TYPE##
				 */
				savedOn?: string;
				/**
				 * @description Saved time for this video
				 * @example ##WRONG TYPE##
				 */
				savedTime?: string;
				/**
				 * @description Id of the video
				 * @example ##WRONG TYPE##
				 */
				videoId?: string;
			}[];
			/** @description ##ENTER## */
			success?: number;
		};
		/** @description ##ENTER## */
		GetSavedTime: {
			/**
			 * @description Saved time of the video or -1 if no time is saved for this user
			 * @example ##WRONG TYPE##
			 */
			savedTime?: string;
			/** @description ##ENTER## */
			success?: number;
		};
		/** @description ##ENTER## */
		Image: {
			/**
			 * @description URL to the icon version of the image.
			 * @example ##WRONG TYPE##
			 */
			icon_url?: string;
			/**
			 * @description Name of image tag for filerting images.
			 * @example ##WRONG TYPE##
			 */
			image_tag?: string;
			/**
			 * @description URL to the medium size of the image.
			 * @example ##WRONG TYPE##
			 */
			medium_url?: string;
			/**
			 * @description URL to the original image.
			 * @example ##WRONG TYPE##
			 */
			original_url?: string;
			/**
			 * @description URL to the large screenshot version of the image.
			 * @example ##WRONG TYPE##
			 */
			screen_large_url?: string;
			/**
			 * @description URL to the screenshot version of the image.
			 * @example ##WRONG TYPE##
			 */
			screen_url?: string;
			/**
			 * @description URL to the small version of the image.
			 * @example ##WRONG TYPE##
			 */
			small_url?: string;
			/**
			 * @description URL to the super sized version of the image.
			 * @example ##WRONG TYPE##
			 */
			super_url?: string;
			/**
			 * @description URL to the thumb-sized version of the image.
			 * @example ##WRONG TYPE##
			 */
			thumb_url?: string;
			/**
			 * @description URL to the tiny version of the image.
			 * @example ##WRONG TYPE##
			 */
			tiny_url?: string;
		};
		InvalidAPIKey: components['schemas']['Response'] & {
			/** @enum {unknown} */
			error?: 'Invalid API Key';
			/** @enum {unknown} */
			results?: never[];
			/** @enum {unknown} */
			status_code?: 100;
		};
		/** @description ##ENTER## */
		Limit: number;
		/** @description ##ENTER## */
		Location: {
			/**
			 * @description List of aliases the location is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the location detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the location was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the location was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the location.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the location.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Game where the location made its first appearance.
			 * @example ##WRONG TYPE##
			 */
			first_appeared_in_game?: string;
			/**
			 * @description For use in single item api call for location.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the location.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the location.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Name of the location.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the location on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Location.Detail': components['schemas']['Location'] & unknown;
		/** @description ##ENTER## */
		Object: {
			/**
			 * @description List of aliases the object is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the object detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the object was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the object was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the object.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the object.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Game where the object made its first appearance.
			 * @example ##WRONG TYPE##
			 */
			first_appeared_in_game?: string;
			/**
			 * @description For use in single item api call for object.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the object.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the object.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Name of the object.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the object on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Object.Detail': components['schemas']['Object'] & {
			/**
			 * @description Characters related to the object.
			 * @example ##WRONG TYPE##
			 */
			characters?: string;
			/**
			 * @description Companies related to the object.
			 * @example ##WRONG TYPE##
			 */
			companies?: string;
			/**
			 * @description Concepts related to the object.
			 * @example ##WRONG TYPE##
			 */
			concepts?: string;
			/**
			 * @description Franchises related to the object.
			 * @example ##WRONG TYPE##
			 */
			franchises?: string;
			/**
			 * @description Games the object has appeared in.
			 * @example ##WRONG TYPE##
			 */
			games?: string;
			/**
			 * @description Locations related to the object.
			 * @example ##WRONG TYPE##
			 */
			locations?: string;
			/**
			 * @description Objects related to the object.
			 * @example ##WRONG TYPE##
			 */
			objects?: string;
			/**
			 * @description People who have worked with the object.
			 * @example ##WRONG TYPE##
			 */
			people?: string;
		};
		/** @description ##ENTER## */
		Offset: number;
		/** @description ##ENTER## */
		Page: number;
		/** @description ##ENTER## */
		Person: {
			/**
			 * @description List of aliases the person is known by. A \n (newline) seperates each alias.
			 * @example ##WRONG TYPE##
			 */
			aliases?: string;
			/**
			 * @description URL pointing to the person detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the person was born.
			 * @example ##WRONG TYPE##
			 */
			birth_date?: string;
			/**
			 * @description Country the person resides in.
			 * @example ##WRONG TYPE##
			 */
			country?: string;
			/**
			 * @description Date the person was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the person was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Date the person died.
			 * @example ##WRONG TYPE##
			 */
			death_date?: string;
			/**
			 * @description Brief summary of the person.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the person.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Game the person was first credited.
			 * @example ##WRONG TYPE##
			 */
			first_credited_game?: string;
			/**
			 * @description Gender of the person. Available options are: Male, Female, Other
			 * @example ##WRONG TYPE##
			 */
			gender?: string;
			/**
			 * @description For use in single item api call for person.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description City or town the person resides in.
			 * @example ##WRONG TYPE##
			 */
			hometown?: string;
			/**
			 * @description Unique ID of the person.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the person.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Name of the person.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the person on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Person.Detail': components['schemas']['Person'] & {
			/**
			 * @description Characters related to the person.
			 * @example ##WRONG TYPE##
			 */
			characters?: string;
			/**
			 * @description Concepts related to the person.
			 * @example ##WRONG TYPE##
			 */
			concepts?: string;
			/**
			 * @description Franchises related to the person.
			 * @example ##WRONG TYPE##
			 */
			franchises?: string;
			/**
			 * @description Games the person has appeared in.
			 * @example ##WRONG TYPE##
			 */
			games?: string;
			/**
			 * @description Locations related to the person.
			 * @example ##WRONG TYPE##
			 */
			locations?: string;
			/**
			 * @description Objects related to the person.
			 * @example ##WRONG TYPE##
			 */
			objects?: string;
			/**
			 * @description People who have worked with the person.
			 * @example ##WRONG TYPE##
			 */
			people?: string;
		};
		/** @description ##ENTER## */
		Platform: {
			/**
			 * @description Abbreviation of the platform.
			 * @example ##WRONG TYPE##
			 */
			abbreviation?: string;
			/**
			 * @description URL pointing to the platform detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Company that created the platform.
			 * @example ##WRONG TYPE##
			 */
			company?: string;
			/**
			 * @description Date the platform was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the platform was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the platform.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the platform.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description For use in single item api call for platform.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the platform.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the platform.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description List of image tags to filter the images endpoint.
			 * @example ##WRONG TYPE##
			 */
			image_tags?: string;
			/**
			 * @description Approximate number of sold hardware units.
			 * @example ##WRONG TYPE##
			 */
			install_base?: string;
			/**
			 * @description Name of the platform.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description Flag indicating whether the platform has online capabilities.
			 * @example ##WRONG TYPE##
			 */
			online_support?: string;
			/**
			 * @description Initial price point of the platform.
			 * @example ##WRONG TYPE##
			 */
			original_price?: string;
			/**
			 * @description Date of the platform.
			 * @example ##WRONG TYPE##
			 */
			release_date?: string;
			/**
			 * @description URL pointing to the platform on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Platform.Detail': components['schemas']['Platform'] & unknown;
		/** @description ##ENTER## */
		PlatformId: number;
		/** @description ##ENTER## */
		Promo: {
			/**
			 * @description URL pointing to the promo detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the promo was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Brief summary of the promo.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description For use in single item api call for promo.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the promo.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the promo.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description The link that promo points to.
			 * @example ##WRONG TYPE##
			 */
			link?: string;
			/**
			 * @description Name of the promo.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			resource_type?: components['schemas']['ResourceType'] & unknown;
			/**
			 * @description Author of the promo.
			 * @example ##WRONG TYPE##
			 */
			user?: string;
		};
		'Promo.Detail': components['schemas']['Promo'] & unknown;
		/** @description ##ENTER## */
		Query: string;
		/** @description ##ENTER## */
		RatingBoard: {
			/**
			 * @description URL pointing to the rating_board detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the rating_board was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the rating_board was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the rating_board.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the rating_board.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description For use in single item api call for rating_board.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the rating_board.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the rating_board.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Name of the rating_board.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the rating_board on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'RatingBoard.Detail': components['schemas']['RatingBoard'] & {
			/**
			 * @description Region the rating_board is responsible for.
			 * @example ##WRONG TYPE##
			 */
			region?: string;
		};
		/** @description ##ENTER## */
		Region: {
			/**
			 * @description URL pointing to the region detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the region was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the region was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the region.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the region.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description For use in single item api call for region.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the region.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the region.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Name of the region.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the region on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Region.Detail': components['schemas']['Region'] & {
			/**
			 * @description region in the region.
			 * @example ##WRONG TYPE##
			 */
			rating_boards?: string;
		};
		/** @description ##ENTER## */
		Release: {
			/**
			 * @description URL pointing to the release detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the release was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the release was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the release.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the release.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description "Expected day of release. The day is represented numerically. Combine with 'expected_release_month', 'expected_release_year' and 'expected_release_quarter' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set."
			 * @example ##WRONG TYPE##
			 */
			expected_release_day?: string;
			/**
			 * @description "Expected month of release. The month is represented numerically. Combine with 'expected_release_day', expected_release_quarter' and 'expected_release_year' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set."
			 * @example ##WRONG TYPE##
			 */
			expected_release_month?: string;
			/**
			 * @description Expected quarter of release. The quarter is represented numerically, where 1 = Q1, 2 = Q2, 3 = Q3, and 4 = Q4. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_year' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set.
			 * @example ##WRONG TYPE##
			 */
			expected_release_quarter?: string;
			/**
			 * @description Expected year of release. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'release_date' field is set.
			 * @example ##WRONG TYPE##
			 */
			expected_release_year?: string;
			/**
			 * @description Game the release is for.
			 * @example ##WRONG TYPE##
			 */
			game?: string;
			/**
			 * @description Rating of the release.
			 * @example ##WRONG TYPE##
			 */
			game_rating?: string;
			/**
			 * @description For use in single item api call for release.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the release.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the release.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Maximum players
			 * @example ##WRONG TYPE##
			 */
			maximum_players?: string;
			/**
			 * @description Minimum players
			 * @example ##WRONG TYPE##
			 */
			minimum_players?: string;
			/**
			 * @description Multiplayer features
			 * @example ##WRONG TYPE##
			 */
			multiplayer_features?: string;
			/**
			 * @description Name of the release.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description The release's platform.
			 * @example ##WRONG TYPE##
			 */
			platform?: string;
			/**
			 * @description The type of product code the release has (ex. UPC/A, ISBN-10, EAN-13).
			 * @example ##WRONG TYPE##
			 */
			product_code_type?: string;
			/**
			 * @description The release's product code.
			 * @example ##WRONG TYPE##
			 */
			product_code_value?: string;
			/**
			 * @description Region the release is responsible for.
			 * @example ##WRONG TYPE##
			 */
			region?: string;
			/**
			 * @description Date of the release.
			 * @example ##WRONG TYPE##
			 */
			release_date?: string;
			/**
			 * @description Resolutions available
			 * @example ##WRONG TYPE##
			 */
			resolutions?: string;
			/**
			 * @description Singleplayer features
			 * @example ##WRONG TYPE##
			 */
			singleplayer_features?: string;
			/**
			 * @description URL pointing to the release on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
			/**
			 * @description Sound systems
			 * @example ##WRONG TYPE##
			 */
			sound_systems?: string;
			/**
			 * @description Widescreen support
			 * @example ##WRONG TYPE##
			 */
			widescreen_support?: string;
		};
		'Release.Detail': components['schemas']['Release'] & {
			/**
			 * @description Companies who developed the release.
			 * @example ##WRONG TYPE##
			 */
			developers?: string;
			/**
			 * @description Companies who published the release.
			 * @example ##WRONG TYPE##
			 */
			publishers?: string;
		};
		/**
		 * @description ##ENTER##
		 * @enum {string}
		 */
		ResourceType: 'game' | 'franchise' | 'character' | 'concept' | 'object' | 'location' | 'person' | 'company' | 'video';
		/** @description ##ENTER## */
		Response: {
			/** @description A text string representing the status_code */
			error?: string;
			/** @description The value of the limit filter specified, or 100 if not specified */
			limit?: number;
			/** @description The number of results on this page */
			number_of_page_results?: number;
			/** @description The number of total results matching the filter conditions specified */
			number_of_total_results?: number;
			/** @description The value of the offset filter specified, or 0 if not specified */
			offset?: number;
			/** @description Zero or more items that match the filters specified */
			results?: string;
			/** @description An integer indicating the result of the request. Acceptable values are:<br />1:OK<br />100:Invalid API Key<br />101:Object Not Found<br />102:Error in URL Format<br />103:'jsonp' format requires a 'json_callback' argument<br />104:Filter Error<br />105:Subscriber only video is for subscribers only */
			status_code?: number;
		};
		/** @description ##ENTER## */
		Review: {
			/**
			 * @description URL pointing to the review detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Brief summary of the review.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the review.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description Name of the Downloadable Content package.
			 * @example ##WRONG TYPE##
			 */
			dlc_name?: string;
			/**
			 * @description Game the review is for.
			 * @example ##WRONG TYPE##
			 */
			game?: string;
			/**
			 * @description For use in single item api call for review.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the review.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Date the review was published on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			publish_date?: string;
			/**
			 * @description Release of game for review.
			 * @example ##WRONG TYPE##
			 */
			release?: string;
			/**
			 * @description Name of the review's author.
			 * @example ##WRONG TYPE##
			 */
			reviewer?: string;
			/**
			 * @description The score given to the game on a scale of 1 to 5.
			 * @example ##WRONG TYPE##
			 */
			score?: string;
			/**
			 * @description URL pointing to the review on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Review.Detail': components['schemas']['Review'] & {
			/**
			 * @description Platforms the review appeared in.
			 * @example ##WRONG TYPE##
			 */
			platforms?: string;
		};
		/** @description ##ENTER## */
		SaveTime: {
			/** @description ##ENTER## */
			message?: string;
			/** @description ##ENTER## */
			success?: boolean;
		};
		Search: (
			| components['schemas']['Game']
			| components['schemas']['Franchise']
			| components['schemas']['Character']
			| components['schemas']['Concept']
			| components['schemas']['Object']
			| components['schemas']['Location']
			| components['schemas']['Person']
			| components['schemas']['Company']
			| components['schemas']['Video']
		) & {
			resource_type?: components['schemas']['ResourceType'] & unknown;
		};
		/** @description ##ENTER## */
		Sort: string;
		/** @description ##ENTER## */
		SubscriberOnly: boolean;
		/** @description ##ENTER## */
		Theme: {
			/**
			 * @description URL pointing to the theme detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description For use in single item api call for theme.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the theme.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Name of the theme.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the theme on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'Theme.Detail': components['schemas']['Theme'] & unknown;
		/** @description ##ENTER## */
		TimeToSave: number;
		/** @description ##ENTER## */
		Type: {
			/**
			 * @description The name of the type's detail resource.
			 * @example ##WRONG TYPE##
			 */
			detail_resource_name?: string;
			/**
			 * @description Unique ID of the type.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description The name of the type's list resource.
			 * @example ##WRONG TYPE##
			 */
			list_resource_name?: string;
		};
		/** @description ##ENTER## */
		UserReview: {
			/**
			 * @description URL pointing to the user_review detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Date the user_review was added to Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_added?: string;
			/**
			 * @description Date the user_review was last updated on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			date_last_updated?: string;
			/**
			 * @description Brief summary of the user_review.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Description of the user_review.
			 * @example ##WRONG TYPE##
			 */
			description?: string;
			/**
			 * @description DLC being reviewed.
			 * @example ##WRONG TYPE##
			 */
			dlc?: string;
			/**
			 * @description Game being reviewd.
			 * @example ##WRONG TYPE##
			 */
			game?: string;
			/**
			 * @description For use in single item api call for user_review.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the user_review.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Release being reviewed.
			 * @example ##WRONG TYPE##
			 */
			release?: string;
			/**
			 * @description Name of the review's author.
			 * @example ##WRONG TYPE##
			 */
			reviewer?: string;
			/**
			 * @description The score given to the game on a scale of 1 to 5.
			 * @example ##WRONG TYPE##
			 */
			score?: string;
			/**
			 * @description URL pointing to the user_review on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'UserReview.Detail': components['schemas']['UserReview'] & unknown;
		/** @description ##ENTER## */
		Video: {
			/**
			 * @description URL pointing to the video detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Related objects to the video.
			 * @example ##WRONG TYPE##
			 */
			associations?: string;
			/**
			 * @description Brief summary of the video.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description URL for video embed player. To be inserted into an iFrame.<br />You can add ?autoplay=true to auto-play.<br />You can add ?time=x where 'x' is an integer between 0 and the length of the video in seconds to start the video at that point.<br />You can add ?vol=x where 'x' is a decimal between 0 and 1, .75 for example, to set the starting volume.<br />The above three parameters may be used together. Example: ?time=45&vol=.5&autoplay=true<br />See http://www.giantbomb.com/api/video-embed-sample/ for more information on using the embed player.
			 * @example ##WRONG TYPE##
			 */
			embed_player?: string;
			/**
			 * @description For use in single item api call for video.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description URL to the HD version of the video.
			 * @example ##WRONG TYPE##
			 */
			hd_url?: string;
			/**
			 * @description URL to the High Res version of the video.
			 * @example ##WRONG TYPE##
			 */
			high_url?: string;
			/**
			 * @description Unique ID of the video.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the video.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Length (in seconds) of the video.
			 * @example ##WRONG TYPE##
			 */
			length_seconds?: string;
			/**
			 * @description URL to the Low Res version of the video.
			 * @example ##WRONG TYPE##
			 */
			low_url?: string;
			/**
			 * @description Name of the video.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description Premium status of video.
			 * @example ##WRONG TYPE##
			 */
			premium?: string;
			/**
			 * @description Date the video was published on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			publish_date?: string;
			/**
			 * @description The time where the user left off watching this video
			 * @example ##WRONG TYPE##
			 */
			saved_time?: string;
			/**
			 * @description URL pointing to the video on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
			/**
			 * @description The video's filename.
			 * @example ##WRONG TYPE##
			 */
			url?: string;
			/**
			 * @description Author of the video.
			 * @example ##WRONG TYPE##
			 */
			user?: string;
			/**
			 * @description Video categories
			 * @example ##WRONG TYPE##
			 */
			video_categories?: string;
			/**
			 * @description Video show
			 * @example ##WRONG TYPE##
			 */
			video_show?: string;
			/**
			 * @description Video category
			 * @example ##WRONG TYPE##
			 */
			video_type?: string;
			/**
			 * @description Youtube ID for the video.
			 * @example ##WRONG TYPE##
			 */
			youtube_id?: string;
		};
		'Video.Detail': components['schemas']['Video'] & {
			/**
			 * @description Crew of the video.
			 * @example ##WRONG TYPE##
			 */
			crew?: string;
			/**
			 * @description Hosts of the video.
			 * @example ##WRONG TYPE##
			 */
			hosts?: string;
		};
		/** @description ##ENTER## */
		VideoCategory: {
			/**
			 * @description URL pointing to the video_category detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Brief summary of the video_category.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Unique ID of the video_category.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the video_category.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description Name of the video_category.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the video_category on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'VideoCategory.Detail': components['schemas']['VideoCategory'] & unknown;
		/** @description ##ENTER## */
		VideoId: number;
		/** @description ##ENTER## */
		VideoShow: {
			/**
			 * @description Is this show currently active
			 * @example ##WRONG TYPE##
			 */
			active?: string;
			/**
			 * @description URL pointing to the video_show detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Endpoint to retrieve the videos attached to this video_show.
			 * @example ##WRONG TYPE##
			 */
			api_videos_url?: string;
			/**
			 * @description Brief summary of the video_show.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Should this show be displayed in navigation menus
			 * @example ##WRONG TYPE##
			 */
			display_nav?: string;
			/**
			 * @description For use in single item api call for video_show.
			 * @example ##WRONG TYPE##
			 */
			guid?: string;
			/**
			 * @description Unique ID of the video_show.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Main image of the video_show.
			 * @example ##WRONG TYPE##
			 */
			image?: string;
			/**
			 * @description The latest episode of a video show. Overrides other sorts when used as a sort field.
			 * @example ##WRONG TYPE##
			 */
			latest?: string;
			/**
			 * @description Show logo.
			 * @example ##WRONG TYPE##
			 */
			logo?: string;
			/**
			 * @description Editor ordering.
			 * @example ##WRONG TYPE##
			 */
			position?: string;
			/**
			 * @description Premium status of video_show.
			 * @example ##WRONG TYPE##
			 */
			premium?: string;
			/**
			 * @description URL pointing to the video_show on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
			/**
			 * @description Title of the video_show.
			 * @example ##WRONG TYPE##
			 */
			title?: string;
		};
		'VideoShow.Detail': components['schemas']['VideoShow'] & unknown;
		/** @description ##ENTER## */
		VideoType: {
			/**
			 * @description URL pointing to the video_type detail resource.
			 * @example ##WRONG TYPE##
			 */
			api_detail_url?: string;
			/**
			 * @description Brief summary of the video_type.
			 * @example ##WRONG TYPE##
			 */
			deck?: string;
			/**
			 * @description Unique ID of the video_type.
			 * @example ##WRONG TYPE##
			 */
			id?: string;
			/**
			 * @description Name of the video_type.
			 * @example ##WRONG TYPE##
			 */
			name?: string;
			/**
			 * @description URL pointing to the video_type on Giant Bomb.
			 * @example ##WRONG TYPE##
			 */
			site_detail_url?: string;
		};
		'VideoType.Detail': components['schemas']['VideoType'] & unknown;
	};
	responses: {
		/** @description ##ENTER## */
		InvalidAPIKey: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/json': components['schemas']['InvalidAPIKey'];
				'application/jsonp': components['schemas']['InvalidAPIKey'];
				'application/xml': components['schemas']['InvalidAPIKey'];
			};
		};
	};
	parameters: {
		FieldList: components['schemas']['FieldList'];
		/** @description The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: &filter=field:value<br />Multiple filters: &filter=field:value,field:value<br />Date filters: &filter=field:start value|end value (using datetime format) */
		Filter: components['schemas']['Filter'];
		/** @description The data format of the response takes either xml, json, or jsonp. */
		Format: components['schemas']['Format'];
		/** @description Filter by the ID field on the game resource. */
		Game: components['schemas']['GameId'];
		/** @description The number of results to display per page. This value defaults to 100 and can not exceed this number. */
		Limit: components['schemas']['Limit'];
		/** @description Return results starting with the object at the offset specified. */
		Offset: components['schemas']['Offset'];
		/** @description Page number of search results. */
		Page: components['schemas']['Page'];
		/** @description Filters results by platform. The value passed to this filter should be the ID of the platform to filter results by. */
		Platforms: components['schemas']['PlatformId'];
		/** @description The search string. */
		Query: components['schemas']['Query'];
		/** @description List of resources to filter results. This filter can accept multiple arguments, each delimited with a ",". Available options are:<br />game<br />franchise<br />character<br />concept<br />object<br />location<br />person<br />company<br />video */
		Resources: components['schemas']['ResourceType'][];
		/** @description The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc. */
		Sort: components['schemas']['Sort'];
		/** @description ##ENTER## */
		SubscriberOnly: components['schemas']['SubscriberOnly'];
		/** @description The number of seconds into the video the current user is */
		TimeToSave: components['schemas']['TimeToSave'];
		/** @description Id of the video */
		VideoId: components['schemas']['VideoId'];
	};
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
