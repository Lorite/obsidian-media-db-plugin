/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/?t': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Returns the most popular match for a given title */
		get: operations['getTitle'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/?i': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Returns a single result based on the ID provided */
		get: operations['getId'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/?s': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Returns an array of results for a given title */
		get: operations['titleSearch'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: never;
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	getTitle: {
		parameters: {
			query: {
				/** @description Title of movie or series */
				t: string;
				/** @description Year of release */
				y?: number;
				/** @description Return movie or series */
				type?: 'movie' | 'series';
				/** @description Return short or full plot */
				plot?: 'short' | 'full';
				/** @description The response type to return */
				r?: 'json' | 'xml';
				/** @description JSONP callback name */
				callback?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Not authenticated */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	getId: {
		parameters: {
			query: {
				/** @description A valid IMDb ID (e.g. tt0000001) */
				i: string;
				/** @description Return short or full plot */
				plot?: 'short' | 'full';
				/** @description The response type to return */
				r?: 'json' | 'xml';
				/** @description JSONP callback name */
				callback?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Not authenticated */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	titleSearch: {
		parameters: {
			query: {
				/** @description Title of movie or series */
				s: string;
				/** @description Year of release */
				y?: number;
				/** @description Return movie or series */
				type?: 'movie' | 'series';
				/** @description The response type to return */
				r?: 'json' | 'xml';
				/** @description Page number to return */
				page?: number;
				/** @description JSONP callback name */
				callback?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful operation */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Not authenticated */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
